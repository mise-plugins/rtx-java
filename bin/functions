#!/usr/bin/env bash
set -e

if [ "${RTX_TRACE:-}" == "1" ]; then
    set -x
fi

CACHE_DIR="${TMPDIR:-/tmp}/rtx-java.cache"

if [ ! -d "${CACHE_DIR}" ]
then
    mkdir -p "${CACHE_DIR}"
fi

KERNEL_NAME="$(uname -s)"
case "${KERNEL_NAME}" in
    Darwin)
            OS="macosx"
            SHA256SUM="shasum -a 256"
            STAT="/usr/bin/stat"
            STAT_OPTS=('-f' '%c')
            TEMP_DIR=$(/usr/bin/mktemp -dt rtx-java)
            ;;
    Linux)
           OS="linux"
           SHA256SUM="sha256sum"
           STAT="stat"
           STAT_OPTS=('-c' '%Z')
           TEMP_DIR=$(mktemp -dp /tmp rtx-java.XXXXXXXX)
           ;;
    *) echo "Unknown operating system: ${KERNEL_NAME}"
       exit 1
esac

trap 'test -d "${TEMP_DIR}" && rm -rf "${TEMP_DIR}"' EXIT

MACHINE="$(uname -m)"
case "${MACHINE}" in
    x86_64) ARCHITECTURE="x86_64" ;;
    aarch64|arm64) ARCHITECTURE="aarch64" ;;
    armv7l) ARCHITECTURE="arm32-vfp-hflt" ;;
    *) echo "Unknown machine architecture: ${MACHINE}"
       exit 1
esac

function check-unzip() {
  USAGE="Install unzip to continue. Aborting."

  if ! [ -x "$(command -v unzip)" ]; then
    echo "${USAGE}" >&2
    exit 1;
  fi
}

function retrieve-release-data() {
    local cache_file="${CACHE_DIR}/releases-${OS}-${ARCHITECTURE}.tsv"
    # shellcheck disable=SC2046
    if [[ ! -r "${cache_file}" ]] || (( $($STAT "${STAT_OPTS[@]}" "${cache_file}") <= $(date +%s) - 3600 )) ; then
        # TODO: not this, just use the version in the repo and rely on rtx autoupdating
        local base_url="https://raw.githubusercontent.com/rtx-plugins/rtx-java/main/data/jdk-${OS}-${ARCHITECTURE}"
        local url
        case "${RTX_TOOL_OPTS__JAVA_RELEASE_TYPE:-}" in
            ea) url="$base_url-ea.tsv" ;;
            all) url="$base_url.tsv" ;;
            *) url="$base_url-ga.tsv" ;;
        esac

        curl -s -f --compressed -L "${url}" -o "${cache_file}"
    fi
}

function list-all() {
    retrieve-release-data
    local releases
    releases="$(cut -d $'\t' -f 1 "${CACHE_DIR}/releases-${OS}-${ARCHITECTURE}.tsv" | uniq)"
    echo -n "${releases}" | tr '\n' ' '
    echo -n "${releases}" | grep "openjdk" | sed 's/^openjdk-//g' | tr '\n' ' '
}

function install {
    local release_data package_link package_filename checksum
    local -a dirs

    retrieve-release-data

    # if install version starts with a digit
    if [[ "${RTX_INSTALL_VERSION}" =~ ^[0-9] ]]; then
        RTX_INSTALL_VERSION="openjdk-${RTX_INSTALL_VERSION}"
    fi
    release_data=$(grep "^${RTX_INSTALL_VERSION}	" "${CACHE_DIR}/releases-${OS}-${ARCHITECTURE}.tsv" | tail -n 1)
    if [[ -z "${release_data}" ]]; then
        echo "Unknown release: ${RTX_INSTALL_VERSION}"
        exit 1
    fi

    package_filename=$(cut -d $'\t' -f 2 <<<"${release_data}")
    package_link=$(cut -d $'\t' -f 3 <<<"${release_data}")
    checksum=$(cut -d $'\t' -f 4 <<<"${release_data}")

    if [[ "${package_filename}" =~ "zip$" ]]; then
        check-unzip
    fi

    cd "${TEMP_DIR}" || return 1
    if ! curl -LO -# -w "${package_filename}\n" "${package_link}"; then
        exit 1
    fi

    ${SHA256SUM} -c <<<"${checksum}  ${package_filename}"

    case "${package_filename}" in
        *zip) unzip "${package_filename}"
              ;;
        *tar.gz) tar xf "${package_filename}"
                 ;;
        *) echo "Cannot extract ${package_filename}"
           exit 1
           ;;
    esac

    read -r -a dirs <<<"$(ls -d ./*/)"
    cd "${dirs[0]}" || return 1
    if [ ! -d "${RTX_INSTALL_PATH}" ]; then
        mkdir -p "${RTX_INSTALL_PATH}"
    fi

    case ${OS} in
        macosx)
            case ${RTX_INSTALL_VERSION} in
                zulu*)
                    mv ./* "${RTX_INSTALL_PATH}"
                    ;;
                liberica*)
                    mv ./* "${RTX_INSTALL_PATH}"
                    ;;
                *)
                    mv Contents/Home/* "${RTX_INSTALL_PATH}"
                    ;;
            esac ;;
        *) mv ./* "${RTX_INSTALL_PATH}" ;;
    esac
}

case "$(basename "${0}")" in
    list-all) list-all
              ;;
    install) install
             ;;
esac
